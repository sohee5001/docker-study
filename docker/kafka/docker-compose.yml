version: '2'

# 주키퍼와 카프카 서비스를 설정한다
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper1
    hostname: zookeeper-1
    ports:
      - "12181:12181"     # 클라이언트 포트 12181를 bind 한다. 호스트포트:컨테이너포트
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:12888:13888

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    hostname: kafka-1
    ports:
      - "29092:29092"
    depends_on:             #컨테이너가 시작되는 순서 컨트롤  kafka 수행 이전에 zookeeper-1 수행
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:29092,EXTERNAL://localhost:9092    # kafka 브로커에 접근할 수 있는 주소 목록. INTERNAL : 내부에서 도커로 접속할수 있는 주소. EXTERNAL : 외부에서 도커로 접속할수 잇는 주소
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT    # PLAINTEXT: 통신 규약.
      #KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #KAFKA_CREATE_TOPICS: "topic1:3:3"    # Topic명:Partition개수:Replica개수

#  kafka-2:
#    image: confluentinc/cp-kafka:latest
#    hostname: kafka-2
#    container_name: kafka2
#    ports:
#      - "29092:29092"
#    depends_on:
#      - zookeeper-1
#    environment:
#      KAFKA_BROKER_ID: 2
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092
#
#  kafka-3:
#    image: confluentinc/cp-kafka:latest
#    hostname: kafka-3
#    container_name: kafka3
#    ports:
#      - "39092:39092"
#    depends_on:
#      - zookeeper-1
#    environment:
#      KAFKA_BROKER_ID: 3
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:39092

# 카프카 매니저 GUI 툴.
#  kafka-manager:
#    container_name: kafka-manager
#    image: hlebalbau/kafka-manager:latest
#    hostname: kafka-manager
#    depends_on:
#      - kafka-1
#      - zookeeper-1
#    command: -Dconfig.file=/kafka-manager/conf/application.conf -Dapplication.home=/kafkamanager
#    environment:
#      ZK_HOSTS: zookeeper-1:12181
#      #- APPLICATION_SECRET: letmein
#    ports:
#      - "9001:9000"
#    # network_mode: "host"
#
#  #  # 카프카 스키마 저장소 JSON 형태   (restful 인터페이스를 사용하여 스키마 관리 또는 조회)
#  kafka-schema-registry:
#    image: confluentinc/cp-schema-registry:5.2.1
#    hostname: kafka-schema-registry
#    ports:
#      - "18081:8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: http://localhost:19092
#      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
#    #  SCHEMA_REGISTRY_LISTENERS:  http://kafka-schema-registry:8081
#    depends_on:
#      - zookeeper-1
#      - kafka-1
#
#  #  # 카프카 REST-PROXY BOOTSTRAP-SERVER
#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:5.2.1
#    hostname: kafka-rest-proxy
#    ports:
#      - "38082:8082"
#    environment:
#      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper-1:12181
#      KAFKA_REST_LISTENERS:  http://kafka-rest-proxy:8082
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS:  http://localhost:19092
#    depends_on:
#      - zookeeper-1
#      - kafka-1
#      - kafka-schema-registry
#
#  # 카프카 topics GUI 툴.
#  kafka-topics-ui:
#    image: landoop/kafka-topics-ui:0.9.4
#    hostname: kafka-topics-ui
#    ports:
#      - "8000:8000"
#    environment:
#      KAFKA_REST_PROXY_URL: http://kafka-rest-proxy:8082
#      PROXY: "true"
#    depends_on:
#      - zookeeper-1
#      - kafka-1
